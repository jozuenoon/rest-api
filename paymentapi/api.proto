syntax = "proto3";

package paymentapi;

import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "FinTech api";
		version: "1.0";
		contact: {
			name: "FinTech api back";
			url: "https://github.com/jozuenoone/rest-api";
			email: "none@example.com";
		};
	};
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "X-API-Key";
			}
		}
	}
	security: {
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}
	responses: {
		key: "403";
		value: {
            description: "Returned when the user does not have permission to access the resource.";
            schema: {
				json_schema: {
					ref: ".paymentapi.Error";
				}
			}
		}
	}
	responses: {
		key: "404";
		value: {
            description: "Returned when the resource does not exist.";
            schema: {
				json_schema: {
					ref: ".paymentapi.Error";
				}
			}
		}
    }
    responses: {
		key: "500";
		value: {
            description: "Returned when the internal server error occur.";
            schema: {
				json_schema: {
					ref: ".paymentapi.Error";
				}
			}
		}
	}
};

message PaymentRequest {
    string id = 1;
}

message PaymentServiceResponse {
    repeated Payment data = 1;
}

service PaymentService {
    // Get or List payments
    //
    // If empty payment ID is sent, full list of payments is returned.
    rpc GetPayment(PaymentRequest) returns (PaymentServiceResponse) {}
    // Create payment
    //
    // Creates new payment and returns full payment data with special fields attached eg. ID, organization etc.
    rpc CreatePayment(PaymentAttributes) returns (PaymentServiceResponse) {}
    // Updates payment
    //
    // Updates payment based on sent specification.
    rpc UpdatePayment(PaymentUpdate) returns (PaymentServiceResponse) {}
    // Delete payment
    //
    // Deletes payment by given ID.
    rpc DeletePayment(PaymentRequest) returns (PaymentRequest) {}
}

message PaymentUpdate {
    string id = 1;
    PaymentAttributes payment_attributes = 2;
}

message Payment {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Payment"
			description: "Payment model"
			required: ["organisation_id"]
		}
		external_docs: {
			url: "https://github.com/jozuenoon/rest-api/paymentapi";
			description: "Find out more about PaymentAPI";
		}
	};
    string type = 1;
    string id = 2;
    string version = 3;
    string organisation_id = 4;
    PaymentAttributes attributes = 5;
}

message PaymentAttributes {
    string amount = 1;
    string currency = 2;
    string numeric_reference = 3;
    string payment_id = 4;
    string payment_purpose = 5;
    string payment_scheme = 6;
    string payment_type = 7;
    string processing_date = 8;
    string reference = 9;
    string scheme_payment_sub_type = 10;
    string scheme_payment_type = 11;
    string end_to_end_reference = 12;
    BeneficiaryParty beneficiary_party = 13;
    ChargersInformation charges_information = 14;
    Fx fx =  15;
    DebtorParty debtor_party = 16;
    SponsorParty sponsor_party = 17;
}

message BeneficiaryParty {
    string account_name = 1;
    string account_number = 2;
    string account_number_code = 3;
    int32 account_type = 4;
    string address = 5;
    string bank_id = 6;
    string bank_id_code = 7;
    string name = 8;
}

message ChargersInformation {
    message SenderCharges {
        string amount = 1;
        string currency = 2;
    }
    string bearer_code = 1;
    repeated SenderCharges sender_charges = 2;
    string receiver_charges_amount = 3;
    string receiver_charges_currency = 4;
}

message DebtorParty {
        string account_name = 1;
        string account_number = 2;
        string account_number_code = 3;
        string address = 4;
        string bank_id = 5;
        string bank_id_code = 6;
        string name = 7;
}

message SponsorParty {
    string account_number = 1;
    string bank_id = 2;
    string bank_id_code = 3;
}

message Fx {
    string contract_reference = 1;
    string exchange_rate = 2;
    string original_amount = 3;
    string original_currency = 4;
}

message Error {
    string message = 1;
    string error = 2;
    int32 code = 3;
}