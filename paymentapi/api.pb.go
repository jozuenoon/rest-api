// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package paymentapi

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PaymentRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PaymentRequest) Reset()         { *m = PaymentRequest{} }
func (m *PaymentRequest) String() string { return proto.CompactTextString(m) }
func (*PaymentRequest) ProtoMessage()    {}
func (*PaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *PaymentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentRequest.Merge(m, src)
}
func (m *PaymentRequest) XXX_Size() int {
	return m.Size()
}
func (m *PaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentRequest proto.InternalMessageInfo

func (m *PaymentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type PaymentServiceResponse struct {
	Data []*Payment `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *PaymentServiceResponse) Reset()         { *m = PaymentServiceResponse{} }
func (m *PaymentServiceResponse) String() string { return proto.CompactTextString(m) }
func (*PaymentServiceResponse) ProtoMessage()    {}
func (*PaymentServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *PaymentServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentServiceResponse.Merge(m, src)
}
func (m *PaymentServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *PaymentServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentServiceResponse proto.InternalMessageInfo

func (m *PaymentServiceResponse) GetData() []*Payment {
	if m != nil {
		return m.Data
	}
	return nil
}

type PaymentUpdate struct {
	Id                string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PaymentAttributes *PaymentAttributes `protobuf:"bytes,2,opt,name=payment_attributes,json=paymentAttributes,proto3" json:"payment_attributes,omitempty"`
}

func (m *PaymentUpdate) Reset()         { *m = PaymentUpdate{} }
func (m *PaymentUpdate) String() string { return proto.CompactTextString(m) }
func (*PaymentUpdate) ProtoMessage()    {}
func (*PaymentUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *PaymentUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentUpdate.Merge(m, src)
}
func (m *PaymentUpdate) XXX_Size() int {
	return m.Size()
}
func (m *PaymentUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentUpdate proto.InternalMessageInfo

func (m *PaymentUpdate) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PaymentUpdate) GetPaymentAttributes() *PaymentAttributes {
	if m != nil {
		return m.PaymentAttributes
	}
	return nil
}

type Payment struct {
	Type           string             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id             string             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Version        string             `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	OrganisationId string             `protobuf:"bytes,4,opt,name=organisation_id,json=organisationId,proto3" json:"organisation_id,omitempty"`
	Attributes     *PaymentAttributes `protobuf:"bytes,5,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return m.Size()
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Payment) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Payment) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Payment) GetOrganisationId() string {
	if m != nil {
		return m.OrganisationId
	}
	return ""
}

func (m *Payment) GetAttributes() *PaymentAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type PaymentAttributes struct {
	Amount               string               `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency             string               `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	NumericReference     string               `protobuf:"bytes,3,opt,name=numeric_reference,json=numericReference,proto3" json:"numeric_reference,omitempty"`
	PaymentId            string               `protobuf:"bytes,4,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	PaymentPurpose       string               `protobuf:"bytes,5,opt,name=payment_purpose,json=paymentPurpose,proto3" json:"payment_purpose,omitempty"`
	PaymentScheme        string               `protobuf:"bytes,6,opt,name=payment_scheme,json=paymentScheme,proto3" json:"payment_scheme,omitempty"`
	PaymentType          string               `protobuf:"bytes,7,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	ProcessingDate       string               `protobuf:"bytes,8,opt,name=processing_date,json=processingDate,proto3" json:"processing_date,omitempty"`
	Reference            string               `protobuf:"bytes,9,opt,name=reference,proto3" json:"reference,omitempty"`
	SchemePaymentSubType string               `protobuf:"bytes,10,opt,name=scheme_payment_sub_type,json=schemePaymentSubType,proto3" json:"scheme_payment_sub_type,omitempty"`
	SchemePaymentType    string               `protobuf:"bytes,11,opt,name=scheme_payment_type,json=schemePaymentType,proto3" json:"scheme_payment_type,omitempty"`
	EndToEndReference    string               `protobuf:"bytes,12,opt,name=end_to_end_reference,json=endToEndReference,proto3" json:"end_to_end_reference,omitempty"`
	BeneficiaryParty     *BeneficiaryParty    `protobuf:"bytes,13,opt,name=beneficiary_party,json=beneficiaryParty,proto3" json:"beneficiary_party,omitempty"`
	ChargesInformation   *ChargersInformation `protobuf:"bytes,14,opt,name=charges_information,json=chargesInformation,proto3" json:"charges_information,omitempty"`
	Fx                   *Fx                  `protobuf:"bytes,15,opt,name=fx,proto3" json:"fx,omitempty"`
	DebtorParty          *DebtorParty         `protobuf:"bytes,16,opt,name=debtor_party,json=debtorParty,proto3" json:"debtor_party,omitempty"`
	SponsorParty         *SponsorParty        `protobuf:"bytes,17,opt,name=sponsor_party,json=sponsorParty,proto3" json:"sponsor_party,omitempty"`
}

func (m *PaymentAttributes) Reset()         { *m = PaymentAttributes{} }
func (m *PaymentAttributes) String() string { return proto.CompactTextString(m) }
func (*PaymentAttributes) ProtoMessage()    {}
func (*PaymentAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *PaymentAttributes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentAttributes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentAttributes.Merge(m, src)
}
func (m *PaymentAttributes) XXX_Size() int {
	return m.Size()
}
func (m *PaymentAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentAttributes proto.InternalMessageInfo

func (m *PaymentAttributes) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *PaymentAttributes) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PaymentAttributes) GetNumericReference() string {
	if m != nil {
		return m.NumericReference
	}
	return ""
}

func (m *PaymentAttributes) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

func (m *PaymentAttributes) GetPaymentPurpose() string {
	if m != nil {
		return m.PaymentPurpose
	}
	return ""
}

func (m *PaymentAttributes) GetPaymentScheme() string {
	if m != nil {
		return m.PaymentScheme
	}
	return ""
}

func (m *PaymentAttributes) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *PaymentAttributes) GetProcessingDate() string {
	if m != nil {
		return m.ProcessingDate
	}
	return ""
}

func (m *PaymentAttributes) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *PaymentAttributes) GetSchemePaymentSubType() string {
	if m != nil {
		return m.SchemePaymentSubType
	}
	return ""
}

func (m *PaymentAttributes) GetSchemePaymentType() string {
	if m != nil {
		return m.SchemePaymentType
	}
	return ""
}

func (m *PaymentAttributes) GetEndToEndReference() string {
	if m != nil {
		return m.EndToEndReference
	}
	return ""
}

func (m *PaymentAttributes) GetBeneficiaryParty() *BeneficiaryParty {
	if m != nil {
		return m.BeneficiaryParty
	}
	return nil
}

func (m *PaymentAttributes) GetChargesInformation() *ChargersInformation {
	if m != nil {
		return m.ChargesInformation
	}
	return nil
}

func (m *PaymentAttributes) GetFx() *Fx {
	if m != nil {
		return m.Fx
	}
	return nil
}

func (m *PaymentAttributes) GetDebtorParty() *DebtorParty {
	if m != nil {
		return m.DebtorParty
	}
	return nil
}

func (m *PaymentAttributes) GetSponsorParty() *SponsorParty {
	if m != nil {
		return m.SponsorParty
	}
	return nil
}

type BeneficiaryParty struct {
	AccountName       string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	AccountNumber     string `protobuf:"bytes,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	AccountNumberCode string `protobuf:"bytes,3,opt,name=account_number_code,json=accountNumberCode,proto3" json:"account_number_code,omitempty"`
	AccountType       int32  `protobuf:"varint,4,opt,name=account_type,json=accountType,proto3" json:"account_type,omitempty"`
	Address           string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	BankId            string `protobuf:"bytes,6,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	BankIdCode        string `protobuf:"bytes,7,opt,name=bank_id_code,json=bankIdCode,proto3" json:"bank_id_code,omitempty"`
	Name              string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BeneficiaryParty) Reset()         { *m = BeneficiaryParty{} }
func (m *BeneficiaryParty) String() string { return proto.CompactTextString(m) }
func (*BeneficiaryParty) ProtoMessage()    {}
func (*BeneficiaryParty) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *BeneficiaryParty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeneficiaryParty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeneficiaryParty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeneficiaryParty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeneficiaryParty.Merge(m, src)
}
func (m *BeneficiaryParty) XXX_Size() int {
	return m.Size()
}
func (m *BeneficiaryParty) XXX_DiscardUnknown() {
	xxx_messageInfo_BeneficiaryParty.DiscardUnknown(m)
}

var xxx_messageInfo_BeneficiaryParty proto.InternalMessageInfo

func (m *BeneficiaryParty) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *BeneficiaryParty) GetAccountNumber() string {
	if m != nil {
		return m.AccountNumber
	}
	return ""
}

func (m *BeneficiaryParty) GetAccountNumberCode() string {
	if m != nil {
		return m.AccountNumberCode
	}
	return ""
}

func (m *BeneficiaryParty) GetAccountType() int32 {
	if m != nil {
		return m.AccountType
	}
	return 0
}

func (m *BeneficiaryParty) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BeneficiaryParty) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *BeneficiaryParty) GetBankIdCode() string {
	if m != nil {
		return m.BankIdCode
	}
	return ""
}

func (m *BeneficiaryParty) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ChargersInformation struct {
	BearerCode              string                               `protobuf:"bytes,1,opt,name=bearer_code,json=bearerCode,proto3" json:"bearer_code,omitempty"`
	SenderCharges           []*ChargersInformation_SenderCharges `protobuf:"bytes,2,rep,name=sender_charges,json=senderCharges,proto3" json:"sender_charges,omitempty"`
	ReceiverChargesAmount   string                               `protobuf:"bytes,3,opt,name=receiver_charges_amount,json=receiverChargesAmount,proto3" json:"receiver_charges_amount,omitempty"`
	ReceiverChargesCurrency string                               `protobuf:"bytes,4,opt,name=receiver_charges_currency,json=receiverChargesCurrency,proto3" json:"receiver_charges_currency,omitempty"`
}

func (m *ChargersInformation) Reset()         { *m = ChargersInformation{} }
func (m *ChargersInformation) String() string { return proto.CompactTextString(m) }
func (*ChargersInformation) ProtoMessage()    {}
func (*ChargersInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}
func (m *ChargersInformation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChargersInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChargersInformation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChargersInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargersInformation.Merge(m, src)
}
func (m *ChargersInformation) XXX_Size() int {
	return m.Size()
}
func (m *ChargersInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargersInformation.DiscardUnknown(m)
}

var xxx_messageInfo_ChargersInformation proto.InternalMessageInfo

func (m *ChargersInformation) GetBearerCode() string {
	if m != nil {
		return m.BearerCode
	}
	return ""
}

func (m *ChargersInformation) GetSenderCharges() []*ChargersInformation_SenderCharges {
	if m != nil {
		return m.SenderCharges
	}
	return nil
}

func (m *ChargersInformation) GetReceiverChargesAmount() string {
	if m != nil {
		return m.ReceiverChargesAmount
	}
	return ""
}

func (m *ChargersInformation) GetReceiverChargesCurrency() string {
	if m != nil {
		return m.ReceiverChargesCurrency
	}
	return ""
}

type ChargersInformation_SenderCharges struct {
	Amount   string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (m *ChargersInformation_SenderCharges) Reset()         { *m = ChargersInformation_SenderCharges{} }
func (m *ChargersInformation_SenderCharges) String() string { return proto.CompactTextString(m) }
func (*ChargersInformation_SenderCharges) ProtoMessage()    {}
func (*ChargersInformation_SenderCharges) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6, 0}
}
func (m *ChargersInformation_SenderCharges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChargersInformation_SenderCharges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChargersInformation_SenderCharges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChargersInformation_SenderCharges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChargersInformation_SenderCharges.Merge(m, src)
}
func (m *ChargersInformation_SenderCharges) XXX_Size() int {
	return m.Size()
}
func (m *ChargersInformation_SenderCharges) XXX_DiscardUnknown() {
	xxx_messageInfo_ChargersInformation_SenderCharges.DiscardUnknown(m)
}

var xxx_messageInfo_ChargersInformation_SenderCharges proto.InternalMessageInfo

func (m *ChargersInformation_SenderCharges) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *ChargersInformation_SenderCharges) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

type DebtorParty struct {
	AccountName       string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	AccountNumber     string `protobuf:"bytes,2,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	AccountNumberCode string `protobuf:"bytes,3,opt,name=account_number_code,json=accountNumberCode,proto3" json:"account_number_code,omitempty"`
	Address           string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	BankId            string `protobuf:"bytes,5,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	BankIdCode        string `protobuf:"bytes,6,opt,name=bank_id_code,json=bankIdCode,proto3" json:"bank_id_code,omitempty"`
	Name              string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DebtorParty) Reset()         { *m = DebtorParty{} }
func (m *DebtorParty) String() string { return proto.CompactTextString(m) }
func (*DebtorParty) ProtoMessage()    {}
func (*DebtorParty) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}
func (m *DebtorParty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebtorParty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebtorParty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebtorParty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebtorParty.Merge(m, src)
}
func (m *DebtorParty) XXX_Size() int {
	return m.Size()
}
func (m *DebtorParty) XXX_DiscardUnknown() {
	xxx_messageInfo_DebtorParty.DiscardUnknown(m)
}

var xxx_messageInfo_DebtorParty proto.InternalMessageInfo

func (m *DebtorParty) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *DebtorParty) GetAccountNumber() string {
	if m != nil {
		return m.AccountNumber
	}
	return ""
}

func (m *DebtorParty) GetAccountNumberCode() string {
	if m != nil {
		return m.AccountNumberCode
	}
	return ""
}

func (m *DebtorParty) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DebtorParty) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *DebtorParty) GetBankIdCode() string {
	if m != nil {
		return m.BankIdCode
	}
	return ""
}

func (m *DebtorParty) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SponsorParty struct {
	AccountNumber string `protobuf:"bytes,1,opt,name=account_number,json=accountNumber,proto3" json:"account_number,omitempty"`
	BankId        string `protobuf:"bytes,2,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	BankIdCode    string `protobuf:"bytes,3,opt,name=bank_id_code,json=bankIdCode,proto3" json:"bank_id_code,omitempty"`
}

func (m *SponsorParty) Reset()         { *m = SponsorParty{} }
func (m *SponsorParty) String() string { return proto.CompactTextString(m) }
func (*SponsorParty) ProtoMessage()    {}
func (*SponsorParty) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}
func (m *SponsorParty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SponsorParty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SponsorParty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SponsorParty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SponsorParty.Merge(m, src)
}
func (m *SponsorParty) XXX_Size() int {
	return m.Size()
}
func (m *SponsorParty) XXX_DiscardUnknown() {
	xxx_messageInfo_SponsorParty.DiscardUnknown(m)
}

var xxx_messageInfo_SponsorParty proto.InternalMessageInfo

func (m *SponsorParty) GetAccountNumber() string {
	if m != nil {
		return m.AccountNumber
	}
	return ""
}

func (m *SponsorParty) GetBankId() string {
	if m != nil {
		return m.BankId
	}
	return ""
}

func (m *SponsorParty) GetBankIdCode() string {
	if m != nil {
		return m.BankIdCode
	}
	return ""
}

type Fx struct {
	ContractReference string `protobuf:"bytes,1,opt,name=contract_reference,json=contractReference,proto3" json:"contract_reference,omitempty"`
	ExchangeRate      string `protobuf:"bytes,2,opt,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate,omitempty"`
	OriginalAmount    string `protobuf:"bytes,3,opt,name=original_amount,json=originalAmount,proto3" json:"original_amount,omitempty"`
	OriginalCurrency  string `protobuf:"bytes,4,opt,name=original_currency,json=originalCurrency,proto3" json:"original_currency,omitempty"`
}

func (m *Fx) Reset()         { *m = Fx{} }
func (m *Fx) String() string { return proto.CompactTextString(m) }
func (*Fx) ProtoMessage()    {}
func (*Fx) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}
func (m *Fx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fx.Merge(m, src)
}
func (m *Fx) XXX_Size() int {
	return m.Size()
}
func (m *Fx) XXX_DiscardUnknown() {
	xxx_messageInfo_Fx.DiscardUnknown(m)
}

var xxx_messageInfo_Fx proto.InternalMessageInfo

func (m *Fx) GetContractReference() string {
	if m != nil {
		return m.ContractReference
	}
	return ""
}

func (m *Fx) GetExchangeRate() string {
	if m != nil {
		return m.ExchangeRate
	}
	return ""
}

func (m *Fx) GetOriginalAmount() string {
	if m != nil {
		return m.OriginalAmount
	}
	return ""
}

func (m *Fx) GetOriginalCurrency() string {
	if m != nil {
		return m.OriginalCurrency
	}
	return ""
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Code    int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*PaymentRequest)(nil), "paymentapi.PaymentRequest")
	proto.RegisterType((*PaymentServiceResponse)(nil), "paymentapi.PaymentServiceResponse")
	proto.RegisterType((*PaymentUpdate)(nil), "paymentapi.PaymentUpdate")
	proto.RegisterType((*Payment)(nil), "paymentapi.Payment")
	proto.RegisterType((*PaymentAttributes)(nil), "paymentapi.PaymentAttributes")
	proto.RegisterType((*BeneficiaryParty)(nil), "paymentapi.BeneficiaryParty")
	proto.RegisterType((*ChargersInformation)(nil), "paymentapi.ChargersInformation")
	proto.RegisterType((*ChargersInformation_SenderCharges)(nil), "paymentapi.ChargersInformation.SenderCharges")
	proto.RegisterType((*DebtorParty)(nil), "paymentapi.DebtorParty")
	proto.RegisterType((*SponsorParty)(nil), "paymentapi.SponsorParty")
	proto.RegisterType((*Fx)(nil), "paymentapi.Fx")
	proto.RegisterType((*Error)(nil), "paymentapi.Error")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xdd, 0x6e, 0xdb, 0x46,
	0x16, 0xb6, 0xe8, 0xbf, 0xf8, 0xc8, 0x52, 0xac, 0x71, 0x12, 0x33, 0xda, 0x44, 0xe1, 0x6a, 0xb1,
	0x9b, 0xc0, 0x59, 0x49, 0x8e, 0x93, 0x2c, 0x02, 0x03, 0x01, 0x56, 0x71, 0xe2, 0x40, 0x9b, 0xdd,
	0x40, 0xa0, 0xbd, 0x8b, 0xc5, 0xde, 0x68, 0x47, 0xe4, 0xb1, 0x34, 0x89, 0x38, 0xc3, 0xcc, 0x0c,
	0x1d, 0xab, 0x4f, 0x51, 0xe4, 0xaa, 0x37, 0xbd, 0xe9, 0x03, 0xf4, 0xa6, 0xcf, 0x50, 0xa0, 0x77,
	0x0d, 0xd0, 0x9b, 0x5e, 0x16, 0xc9, 0x0b, 0xf4, 0x11, 0x0a, 0x0e, 0x49, 0x89, 0x96, 0x7f, 0x1a,
	0xf4, 0xa6, 0x57, 0xe6, 0x7c, 0xe7, 0x3b, 0x3f, 0x3c, 0xfa, 0xce, 0xf0, 0x18, 0x56, 0x68, 0xc8,
	0x9a, 0xa1, 0x14, 0x5a, 0x10, 0x08, 0xe9, 0x38, 0x40, 0xae, 0x69, 0xc8, 0xaa, 0xce, 0x40, 0x88,
	0xc1, 0x08, 0x5b, 0xc6, 0xd2, 0x8f, 0x0e, 0x5b, 0x3e, 0x2a, 0x4f, 0xb2, 0x50, 0x0b, 0x99, 0xb0,
	0xab, 0x7f, 0x98, 0x65, 0x60, 0x10, 0xea, 0x71, 0x6a, 0x3c, 0xe5, 0x7e, 0xc8, 0x70, 0xe4, 0xf7,
	0x02, 0xaa, 0x5e, 0xa7, 0x8c, 0xbf, 0x9a, 0x3f, 0x5e, 0x63, 0x80, 0xbc, 0xa1, 0xde, 0xd2, 0xc1,
	0x00, 0x65, 0x4b, 0x84, 0x9a, 0x09, 0xae, 0x5a, 0x94, 0x73, 0xa1, 0xa9, 0x79, 0x4e, 0xd8, 0x75,
	0x07, 0xca, 0xdd, 0xa4, 0x38, 0x17, 0xdf, 0x44, 0xa8, 0x34, 0x29, 0x83, 0xc5, 0x7c, 0xbb, 0xe0,
	0x14, 0xee, 0xac, 0xb8, 0x16, 0xf3, 0xeb, 0x6d, 0xb8, 0x96, 0x32, 0xf6, 0x51, 0x1e, 0x31, 0x0f,
	0x5d, 0x54, 0xa1, 0xe0, 0x0a, 0xc9, 0x6d, 0x58, 0xf0, 0xa9, 0xa6, 0x76, 0xc1, 0x99, 0xbf, 0x53,
	0xdc, 0x5e, 0x6f, 0x4e, 0xdf, 0xb2, 0x99, 0xc5, 0x34, 0x84, 0x7a, 0x00, 0xa5, 0x14, 0xf8, 0x77,
	0xe8, 0x53, 0x8d, 0xb3, 0x39, 0xc8, 0x3f, 0x81, 0xa4, 0xce, 0x3d, 0xaa, 0xb5, 0x64, 0xfd, 0x48,
	0xa3, 0xb2, 0x2d, 0xa7, 0x70, 0xa7, 0xb8, 0x7d, 0xf3, 0x8c, 0xb8, 0xed, 0x09, 0xc9, 0xad, 0x84,
	0xb3, 0x50, 0xfd, 0x2b, 0x0b, 0x96, 0x53, 0x22, 0x21, 0xb0, 0xa0, 0xc7, 0x21, 0xa6, 0xb9, 0xcc,
	0x73, 0x9a, 0xdd, 0x9a, 0x64, 0xb7, 0x61, 0xf9, 0x08, 0xa5, 0x62, 0x82, 0xdb, 0xf3, 0x06, 0xcc,
	0x8e, 0xe4, 0x36, 0x5c, 0x16, 0x72, 0x40, 0x39, 0x53, 0xa6, 0x69, 0x3d, 0xe6, 0xdb, 0x0b, 0x86,
	0x51, 0xce, 0xc3, 0x1d, 0x9f, 0x3c, 0x06, 0xc8, 0x15, 0xbe, 0xf8, 0x29, 0x85, 0xe7, 0x1c, 0x76,
	0xde, 0xbc, 0x6b, 0x73, 0xb0, 0x37, 0xb3, 0xaa, 0xb7, 0xb3, 0x76, 0x39, 0x81, 0xf0, 0x71, 0xb4,
	0xe9, 0x42, 0x6d, 0x8f, 0x71, 0xdf, 0x11, 0x51, 0x8c, 0x48, 0x74, 0x68, 0x3f, 0x7e, 0xcc, 0x62,
	0x76, 0x3b, 0x64, 0x6b, 0xa8, 0x75, 0xa8, 0x76, 0x5a, 0xad, 0x01, 0xd3, 0xc3, 0xa8, 0xdf, 0xf4,
	0x44, 0xd0, 0x7a, 0x25, 0x3e, 0x8b, 0x90, 0x0b, 0xc1, 0x5b, 0x12, 0x95, 0x6e, 0xd0, 0x90, 0xb5,
	0xa6, 0x05, 0xd5, 0xbf, 0x5c, 0x82, 0xca, 0xa9, 0xa2, 0xc8, 0x35, 0x58, 0xa2, 0x81, 0x88, 0xb8,
	0x4e, 0x1b, 0x96, 0x9e, 0x48, 0x15, 0x2e, 0x79, 0x91, 0x94, 0xc8, 0xbd, 0x71, 0xda, 0xb8, 0xc9,
	0x99, 0xdc, 0x85, 0x0a, 0x8f, 0x02, 0x94, 0xcc, 0xeb, 0x49, 0x3c, 0xc4, 0x18, 0xc4, 0xb4, 0x91,
	0x6b, 0xa9, 0xc1, 0xcd, 0x70, 0x72, 0x13, 0xb2, 0x61, 0x98, 0x36, 0x73, 0x25, 0x45, 0x3a, 0x7e,
	0xdc, 0xf0, 0xcc, 0x1c, 0x46, 0x32, 0x14, 0x0a, 0x4d, 0x33, 0x57, 0xdc, 0x72, 0x0a, 0x77, 0x13,
	0x94, 0xfc, 0x19, 0x32, 0xa4, 0xa7, 0xbc, 0x21, 0x06, 0x68, 0x2f, 0x19, 0x5e, 0x29, 0x45, 0xf7,
	0x0d, 0x48, 0xfe, 0x08, 0xab, 0x19, 0xcd, 0xc8, 0x60, 0xd9, 0x90, 0x8a, 0x29, 0x76, 0x10, 0xab,
	0x21, 0x4e, 0x29, 0x85, 0x87, 0x4a, 0x31, 0x3e, 0xe8, 0xc5, 0xf2, 0xb4, 0x2f, 0xa5, 0x29, 0x27,
	0xf0, 0xd3, 0x58, 0xb4, 0x37, 0x60, 0x65, 0xfa, 0x7e, 0x2b, 0x49, 0xe5, 0x13, 0x80, 0x3c, 0x84,
	0x8d, 0xa4, 0x90, 0xde, 0xa4, 0xae, 0xa8, 0x9f, 0x24, 0x05, 0xc3, 0xbd, 0x92, 0x98, 0xb3, 0x59,
	0x8a, 0xfa, 0x26, 0x7b, 0x13, 0xd6, 0x67, 0xdc, 0x8c, 0x4b, 0xd1, 0xb8, 0x54, 0x4e, 0xb8, 0x18,
	0x7e, 0x0b, 0xae, 0x20, 0xf7, 0x7b, 0x5a, 0xf4, 0xe2, 0x3f, 0xd3, 0x7a, 0x56, 0x13, 0x07, 0xe4,
	0xfe, 0x81, 0x78, 0xc6, 0xfd, 0x69, 0xc3, 0x3b, 0x50, 0xe9, 0x23, 0xc7, 0x43, 0xe6, 0x31, 0x2a,
	0xc7, 0xbd, 0x90, 0x4a, 0x3d, 0xb6, 0x4b, 0x46, 0xa0, 0x37, 0xf2, 0x02, 0x7d, 0x32, 0x25, 0x75,
	0x63, 0x8e, 0xbb, 0xd6, 0x9f, 0x41, 0x48, 0x17, 0xd6, 0xbd, 0x21, 0x95, 0x03, 0x54, 0x3d, 0xc6,
	0x0f, 0x85, 0x0c, 0x8c, 0xfa, 0xed, 0xb2, 0x09, 0x76, 0x2b, 0x1f, 0x6c, 0xd7, 0xd0, 0xa4, 0xea,
	0x4c, 0x69, 0x2e, 0x49, 0x7d, 0x73, 0x18, 0xa9, 0x81, 0x75, 0x78, 0x6c, 0x5f, 0x36, 0x01, 0xca,
	0xf9, 0x00, 0x7b, 0xc7, 0xae, 0x75, 0x78, 0x4c, 0x76, 0x60, 0xd5, 0xc7, 0xbe, 0x16, 0x32, 0xad,
	0x7b, 0xcd, 0x30, 0x37, 0xf2, 0xcc, 0xa7, 0xc6, 0x9e, 0x94, 0x5c, 0xf4, 0xa7, 0x07, 0xf2, 0x18,
	0x4a, 0xe6, 0x9e, 0x9a, 0x38, 0x57, 0x8c, 0xb3, 0x9d, 0x77, 0xde, 0x4f, 0x08, 0x89, 0xf7, 0xaa,
	0xca, 0x9d, 0xea, 0x5f, 0x58, 0xb0, 0x36, 0xdb, 0x93, 0x58, 0x4e, 0xd4, 0xf3, 0xe2, 0x89, 0xe8,
	0x71, 0x1a, 0x64, 0xb7, 0x4a, 0x31, 0xc5, 0x5e, 0xd2, 0xc0, 0x08, 0x73, 0x42, 0x89, 0x82, 0x3e,
	0xca, 0x74, 0x5e, 0x4a, 0x19, 0xc9, 0x80, 0xf1, 0xef, 0x7e, 0x92, 0xd6, 0xf3, 0x84, 0x9f, 0x8d,
	0x4d, 0xe5, 0x04, 0x77, 0x57, 0xf8, 0x98, 0xcf, 0x6c, 0x04, 0x12, 0x4f, 0xce, 0xe2, 0x24, 0xb3,
	0x91, 0x86, 0x0d, 0xcb, 0xd4, 0xf7, 0x25, 0x2a, 0x95, 0xce, 0x4c, 0x76, 0x24, 0x1b, 0xb0, 0xdc,
	0xa7, 0xfc, 0x75, 0x3c, 0x71, 0xc9, 0x94, 0x2c, 0xc5, 0xc7, 0x8e, 0x4f, 0x1c, 0x58, 0x4d, 0x0d,
	0x49, 0xfa, 0x64, 0x3c, 0x20, 0xb1, 0x9a, 0xbc, 0x04, 0x16, 0xcc, 0x9b, 0x26, 0x23, 0x61, 0x9e,
	0xeb, 0xdf, 0x5a, 0xb0, 0x7e, 0xc6, 0x2f, 0x4c, 0x6e, 0x41, 0xb1, 0x8f, 0x54, 0x66, 0xef, 0x52,
	0x48, 0x83, 0x19, 0xc8, 0x04, 0x3b, 0x80, 0xb2, 0x42, 0xee, 0xc7, 0x84, 0x44, 0x0b, 0xb6, 0x65,
	0x3e, 0x1d, 0x8d, 0x5f, 0xd1, 0x4e, 0x73, 0xdf, 0x78, 0x25, 0x16, 0xe5, 0x96, 0x54, 0xfe, 0x48,
	0xfe, 0x06, 0x1b, 0x12, 0x3d, 0x64, 0x47, 0xd3, 0xb8, 0xbd, 0xf4, 0x12, 0x4b, 0xda, 0x79, 0x35,
	0x33, 0xa7, 0x1e, 0xed, 0xe4, 0x4e, 0xdb, 0x81, 0xeb, 0xa7, 0xfc, 0x26, 0x97, 0x5c, 0x72, 0x33,
	0x6d, 0xcc, 0x78, 0xee, 0xa6, 0xe6, 0xea, 0x2e, 0x94, 0x4e, 0xd4, 0xf4, 0x5b, 0x2e, 0xce, 0xfa,
	0xcf, 0x05, 0x28, 0xe6, 0xe4, 0xfb, 0x3b, 0xaa, 0x2b, 0x27, 0x9d, 0x85, 0x73, 0xa5, 0xb3, 0x78,
	0xa1, 0x74, 0x96, 0xce, 0x95, 0xce, 0x72, 0x4e, 0x3a, 0x21, 0xac, 0xe6, 0x67, 0xee, 0x8c, 0xf7,
	0x29, 0x9c, 0xf5, 0x3e, 0xb9, 0x2a, 0xac, 0x0b, 0xab, 0x98, 0x9f, 0xad, 0xa2, 0xfe, 0x75, 0x01,
	0xac, 0xbd, 0x63, 0xd2, 0x00, 0xe2, 0x09, 0xae, 0x25, 0xf5, 0x74, 0xee, 0xd6, 0x4c, 0x92, 0x55,
	0x32, 0xcb, 0xf4, 0xd6, 0xfc, 0x13, 0x94, 0xf0, 0xd8, 0x1b, 0x52, 0x3e, 0xc0, 0x9e, 0x8c, 0x3f,
	0x09, 0x49, 0xda, 0xd5, 0x0c, 0x74, 0xe3, 0x0f, 0x82, 0xd9, 0x0e, 0xd8, 0x80, 0x71, 0x3a, 0x3a,
	0x29, 0xb8, 0x72, 0x06, 0xa7, 0x4a, 0xbb, 0x0b, 0x95, 0x09, 0x71, 0x46, 0x61, 0x6b, 0x99, 0x21,
	0x93, 0x56, 0xfd, 0x05, 0x2c, 0x3e, 0x93, 0x52, 0xc8, 0xf8, 0x47, 0x09, 0x50, 0x29, 0x3a, 0xc8,
	0xea, 0xcc, 0x8e, 0xe4, 0x0a, 0x2c, 0x62, 0x4c, 0x49, 0xab, 0x4a, 0x0e, 0x71, 0xbf, 0x27, 0x3d,
	0x58, 0x74, 0xcd, 0xf3, 0xf6, 0x0f, 0xd6, 0x64, 0xbf, 0x4b, 0xb7, 0x37, 0xf2, 0x12, 0xe0, 0x39,
	0xea, 0x6c, 0x3f, 0xaa, 0x9e, 0xb5, 0xb5, 0x25, 0x9b, 0x60, 0xb5, 0x7e, 0x86, 0x6d, 0x66, 0x07,
	0xac, 0xcf, 0x91, 0x03, 0x28, 0xed, 0x4a, 0xa4, 0x3a, 0xfb, 0x4c, 0x91, 0x8b, 0xf7, 0x9e, 0x4f,
	0x8c, 0xda, 0x85, 0x52, 0xb2, 0x2b, 0x66, 0x51, 0xaf, 0x9f, 0xe1, 0x96, 0x30, 0x3e, 0x31, 0x62,
	0x07, 0x4a, 0x4f, 0x71, 0x84, 0xd3, 0x88, 0x17, 0xbd, 0xfa, 0x05, 0xb6, 0xfa, 0xdc, 0x93, 0xef,
	0x17, 0xde, 0xb5, 0xbf, 0x59, 0x20, 0x12, 0xd6, 0xf7, 0x18, 0x3f, 0x40, 0x6f, 0x98, 0xad, 0x62,
	0x4e, 0xbb, 0xdb, 0xa9, 0xff, 0x07, 0xec, 0x0c, 0x6e, 0x77, 0x3b, 0x8e, 0x79, 0xd8, 0x8f, 0xc2,
	0x50, 0x48, 0x4d, 0xfe, 0x72, 0xd1, 0x9e, 0x86, 0x93, 0x45, 0xad, 0x4a, 0xde, 0x32, 0x2d, 0x46,
	0xfe, 0xdf, 0xf1, 0x98, 0x06, 0xe1, 0x08, 0x63, 0xde, 0xf6, 0xfc, 0xbd, 0xe6, 0x56, 0xb5, 0x3c,
	0x12, 0x1e, 0x1d, 0x0d, 0x85, 0xd2, 0x3b, 0x8f, 0xb6, 0x1e, 0x6d, 0x6d, 0x5a, 0x56, 0x61, 0x7b,
	0x8d, 0x86, 0xe1, 0x88, 0x79, 0xe6, 0xaa, 0x6c, 0xbd, 0x52, 0x82, 0xef, 0x9c, 0x42, 0xdc, 0x01,
	0xcc, 0x3f, 0xd8, 0xba, 0x4f, 0xfe, 0x0f, 0xcf, 0x5d, 0xd4, 0x91, 0xe4, 0xe8, 0x3b, 0x6f, 0x87,
	0xc8, 0x1d, 0x3d, 0x44, 0x27, 0x52, 0x28, 0x1d, 0x5f, 0xa0, 0x72, 0xb8, 0xd0, 0xce, 0x90, 0x1e,
	0xa1, 0x13, 0xa2, 0x0c, 0x98, 0x8a, 0x77, 0x60, 0x47, 0x0b, 0x87, 0x7a, 0xf1, 0x1e, 0x64, 0xb8,
	0x12, 0x95, 0x88, 0xa4, 0x87, 0x4d, 0x72, 0x15, 0xd6, 0xab, 0x95, 0x7c, 0x9b, 0x8c, 0x6a, 0xdd,
	0x7f, 0xc4, 0x89, 0x1e, 0x90, 0x5d, 0xd8, 0x3c, 0x9d, 0x28, 0x73, 0x9e, 0x26, 0xc3, 0x63, 0xa6,
	0xf4, 0xb9, 0xb1, 0xfe, 0x05, 0xf3, 0x0f, 0xee, 0x3d, 0x24, 0x7b, 0xd0, 0x38, 0x19, 0x2b, 0xe2,
	0x2a, 0xe9, 0x27, 0xfa, 0x4e, 0x80, 0x3e, 0xa3, 0x4e, 0xfc, 0x4d, 0x74, 0x98, 0x72, 0x14, 0xf2,
	0xf3, 0xc3, 0xbd, 0x84, 0xf9, 0x87, 0x5b, 0x5b, 0xe4, 0x39, 0x34, 0x4f, 0x97, 0xc6, 0xb8, 0x46,
	0xc9, 0xe9, 0xc8, 0x51, 0x28, 0x8f, 0x50, 0x3a, 0x66, 0xa4, 0x1c, 0xe1, 0x79, 0x91, 0x3c, 0x2f,
	0xde, 0xff, 0x6e, 0xc1, 0x4d, 0x80, 0x76, 0xc8, 0x5e, 0xe0, 0xb8, 0x1d, 0xe9, 0x21, 0xb9, 0x7c,
	0xc9, 0xaa, 0xae, 0xfc, 0xb7, 0xd1, 0xee, 0x76, 0x1a, 0x2f, 0x70, 0xec, 0x58, 0xfd, 0x35, 0x28,
	0x9f, 0x20, 0xcc, 0x7d, 0xf7, 0xa1, 0x56, 0x78, 0xff, 0xa1, 0x56, 0xf8, 0xe9, 0x43, 0xad, 0xf0,
	0xf9, 0xc7, 0xda, 0xdc, 0xfb, 0x8f, 0xb5, 0xb9, 0x1f, 0x3f, 0xd6, 0xe6, 0xfa, 0x4b, 0xe6, 0xbf,
	0xb1, 0xfb, 0xbf, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa9, 0x72, 0x54, 0xab, 0x35, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServiceClient interface {
	// Get or List payments
	//
	// If empty payment ID is sent, full list of payments is returned.
	GetPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentServiceResponse, error)
	// Create payment
	//
	// Creates new payment and returns full payment data with special fields attached eg. ID, organization etc.
	CreatePayment(ctx context.Context, in *PaymentAttributes, opts ...grpc.CallOption) (*PaymentServiceResponse, error)
	// Updates payment
	//
	// Updates payment based on sent specification.
	UpdatePayment(ctx context.Context, in *PaymentUpdate, opts ...grpc.CallOption) (*PaymentServiceResponse, error)
	// Delete payment
	//
	// Deletes payment by given ID.
	DeletePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentRequest, error)
}

type paymentServiceClient struct {
	cc *grpc.ClientConn
}

func NewPaymentServiceClient(cc *grpc.ClientConn) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) GetPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentServiceResponse, error) {
	out := new(PaymentServiceResponse)
	err := c.cc.Invoke(ctx, "/paymentapi.PaymentService/GetPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreatePayment(ctx context.Context, in *PaymentAttributes, opts ...grpc.CallOption) (*PaymentServiceResponse, error) {
	out := new(PaymentServiceResponse)
	err := c.cc.Invoke(ctx, "/paymentapi.PaymentService/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdatePayment(ctx context.Context, in *PaymentUpdate, opts ...grpc.CallOption) (*PaymentServiceResponse, error) {
	out := new(PaymentServiceResponse)
	err := c.cc.Invoke(ctx, "/paymentapi.PaymentService/UpdatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DeletePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentRequest, error) {
	out := new(PaymentRequest)
	err := c.cc.Invoke(ctx, "/paymentapi.PaymentService/DeletePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
type PaymentServiceServer interface {
	// Get or List payments
	//
	// If empty payment ID is sent, full list of payments is returned.
	GetPayment(context.Context, *PaymentRequest) (*PaymentServiceResponse, error)
	// Create payment
	//
	// Creates new payment and returns full payment data with special fields attached eg. ID, organization etc.
	CreatePayment(context.Context, *PaymentAttributes) (*PaymentServiceResponse, error)
	// Updates payment
	//
	// Updates payment based on sent specification.
	UpdatePayment(context.Context, *PaymentUpdate) (*PaymentServiceResponse, error)
	// Delete payment
	//
	// Deletes payment by given ID.
	DeletePayment(context.Context, *PaymentRequest) (*PaymentRequest, error)
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentapi.PaymentService/GetPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentAttributes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentapi.PaymentService/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreatePayment(ctx, req.(*PaymentAttributes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentapi.PaymentService/UpdatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdatePayment(ctx, req.(*PaymentUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DeletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DeletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paymentapi.PaymentService/DeletePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DeletePayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paymentapi.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPayment",
			Handler:    _PaymentService_GetPayment_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _PaymentService_CreatePayment_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _PaymentService_UpdatePayment_Handler,
		},
		{
			MethodName: "DeletePayment",
			Handler:    _PaymentService_DeletePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *PaymentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *PaymentServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PaymentUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.PaymentAttributes != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PaymentAttributes.Size()))
		n1, err1 := m.PaymentAttributes.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.OrganisationId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrganisationId)))
		i += copy(dAtA[i:], m.OrganisationId)
	}
	if m.Attributes != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Attributes.Size()))
		n2, err2 := m.Attributes.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *PaymentAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Amount)))
		i += copy(dAtA[i:], m.Amount)
	}
	if len(m.Currency) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	if len(m.NumericReference) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.NumericReference)))
		i += copy(dAtA[i:], m.NumericReference)
	}
	if len(m.PaymentId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentId)))
		i += copy(dAtA[i:], m.PaymentId)
	}
	if len(m.PaymentPurpose) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentPurpose)))
		i += copy(dAtA[i:], m.PaymentPurpose)
	}
	if len(m.PaymentScheme) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentScheme)))
		i += copy(dAtA[i:], m.PaymentScheme)
	}
	if len(m.PaymentType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentType)))
		i += copy(dAtA[i:], m.PaymentType)
	}
	if len(m.ProcessingDate) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProcessingDate)))
		i += copy(dAtA[i:], m.ProcessingDate)
	}
	if len(m.Reference) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reference)))
		i += copy(dAtA[i:], m.Reference)
	}
	if len(m.SchemePaymentSubType) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SchemePaymentSubType)))
		i += copy(dAtA[i:], m.SchemePaymentSubType)
	}
	if len(m.SchemePaymentType) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SchemePaymentType)))
		i += copy(dAtA[i:], m.SchemePaymentType)
	}
	if len(m.EndToEndReference) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EndToEndReference)))
		i += copy(dAtA[i:], m.EndToEndReference)
	}
	if m.BeneficiaryParty != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BeneficiaryParty.Size()))
		n3, err3 := m.BeneficiaryParty.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.ChargesInformation != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ChargesInformation.Size()))
		n4, err4 := m.ChargesInformation.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.Fx != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fx.Size()))
		n5, err5 := m.Fx.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if m.DebtorParty != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DebtorParty.Size()))
		n6, err6 := m.DebtorParty.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if m.SponsorParty != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SponsorParty.Size()))
		n7, err7 := m.SponsorParty.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	return i, nil
}

func (m *BeneficiaryParty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeneficiaryParty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountName)))
		i += copy(dAtA[i:], m.AccountName)
	}
	if len(m.AccountNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountNumber)))
		i += copy(dAtA[i:], m.AccountNumber)
	}
	if len(m.AccountNumberCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountNumberCode)))
		i += copy(dAtA[i:], m.AccountNumberCode)
	}
	if m.AccountType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AccountType))
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.BankId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankId)))
		i += copy(dAtA[i:], m.BankId)
	}
	if len(m.BankIdCode) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankIdCode)))
		i += copy(dAtA[i:], m.BankIdCode)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ChargersInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChargersInformation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BearerCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BearerCode)))
		i += copy(dAtA[i:], m.BearerCode)
	}
	if len(m.SenderCharges) > 0 {
		for _, msg := range m.SenderCharges {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ReceiverChargesAmount) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReceiverChargesAmount)))
		i += copy(dAtA[i:], m.ReceiverChargesAmount)
	}
	if len(m.ReceiverChargesCurrency) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReceiverChargesCurrency)))
		i += copy(dAtA[i:], m.ReceiverChargesCurrency)
	}
	return i, nil
}

func (m *ChargersInformation_SenderCharges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChargersInformation_SenderCharges) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Amount)))
		i += copy(dAtA[i:], m.Amount)
	}
	if len(m.Currency) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	return i, nil
}

func (m *DebtorParty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebtorParty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountName)))
		i += copy(dAtA[i:], m.AccountName)
	}
	if len(m.AccountNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountNumber)))
		i += copy(dAtA[i:], m.AccountNumber)
	}
	if len(m.AccountNumberCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountNumberCode)))
		i += copy(dAtA[i:], m.AccountNumberCode)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.BankId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankId)))
		i += copy(dAtA[i:], m.BankId)
	}
	if len(m.BankIdCode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankIdCode)))
		i += copy(dAtA[i:], m.BankIdCode)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *SponsorParty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SponsorParty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccountNumber) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AccountNumber)))
		i += copy(dAtA[i:], m.AccountNumber)
	}
	if len(m.BankId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankId)))
		i += copy(dAtA[i:], m.BankId)
	}
	if len(m.BankIdCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BankIdCode)))
		i += copy(dAtA[i:], m.BankIdCode)
	}
	return i, nil
}

func (m *Fx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContractReference) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContractReference)))
		i += copy(dAtA[i:], m.ContractReference)
	}
	if len(m.ExchangeRate) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ExchangeRate)))
		i += copy(dAtA[i:], m.ExchangeRate)
	}
	if len(m.OriginalAmount) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OriginalAmount)))
		i += copy(dAtA[i:], m.OriginalAmount)
	}
	if len(m.OriginalCurrency) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OriginalCurrency)))
		i += copy(dAtA[i:], m.OriginalCurrency)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Code != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PaymentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *PaymentServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *PaymentUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PaymentAttributes != nil {
		l = m.PaymentAttributes.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OrganisationId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *PaymentAttributes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NumericReference)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PaymentId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PaymentPurpose)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PaymentScheme)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ProcessingDate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SchemePaymentSubType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.SchemePaymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EndToEndReference)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.BeneficiaryParty != nil {
		l = m.BeneficiaryParty.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ChargesInformation != nil {
		l = m.ChargesInformation.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fx != nil {
		l = m.Fx.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DebtorParty != nil {
		l = m.DebtorParty.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	if m.SponsorParty != nil {
		l = m.SponsorParty.Size()
		n += 2 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BeneficiaryParty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AccountNumber)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AccountNumberCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AccountType != 0 {
		n += 1 + sovApi(uint64(m.AccountType))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankIdCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ChargersInformation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BearerCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.SenderCharges) > 0 {
		for _, e := range m.SenderCharges {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.ReceiverChargesAmount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ReceiverChargesCurrency)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ChargersInformation_SenderCharges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *DebtorParty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AccountNumber)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AccountNumberCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankIdCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SponsorParty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountNumber)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BankIdCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Fx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractReference)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ExchangeRate)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OriginalAmount)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OriginalCurrency)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PaymentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Payment{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaymentAttributes == nil {
				m.PaymentAttributes = &PaymentAttributes{}
			}
			if err := m.PaymentAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganisationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrganisationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &PaymentAttributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumericReference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NumericReference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentPurpose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentPurpose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentScheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentScheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessingDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemePaymentSubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemePaymentSubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemePaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemePaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndToEndReference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndToEndReference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeneficiaryParty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeneficiaryParty == nil {
				m.BeneficiaryParty = &BeneficiaryParty{}
			}
			if err := m.BeneficiaryParty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargesInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChargesInformation == nil {
				m.ChargesInformation = &ChargersInformation{}
			}
			if err := m.ChargesInformation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fx == nil {
				m.Fx = &Fx{}
			}
			if err := m.Fx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtorParty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DebtorParty == nil {
				m.DebtorParty = &DebtorParty{}
			}
			if err := m.DebtorParty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SponsorParty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SponsorParty == nil {
				m.SponsorParty = &SponsorParty{}
			}
			if err := m.SponsorParty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeneficiaryParty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeneficiaryParty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeneficiaryParty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumberCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountNumberCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankIdCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankIdCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChargersInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChargersInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChargersInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BearerCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderCharges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderCharges = append(m.SenderCharges, &ChargersInformation_SenderCharges{})
			if err := m.SenderCharges[len(m.SenderCharges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChargesAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChargesAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChargesCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChargesCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChargersInformation_SenderCharges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SenderCharges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SenderCharges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebtorParty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebtorParty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebtorParty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumberCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountNumberCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankIdCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankIdCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SponsorParty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SponsorParty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SponsorParty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BankIdCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BankIdCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractReference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractReference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalCurrency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalCurrency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthApi
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
